# Nginx configuration for portfolio website
# Optimized for React TypeScript application

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # MIME types
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging configuration
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        text/json
        application/javascript
        application/json
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=portfolio:10m rate=10r/s;

    server {
        listen 5575;
        server_name localhost 127.0.0.1;
        
        root /usr/share/nginx/html;
        index index.html index.htm;

        # Rate limiting
        limit_req zone=portfolio burst=20 nodelay;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header X-Download-Options "noopen" always;
        add_header X-Permitted-Cross-Domain-Policies "none" always;

        # Content Security Policy
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https://images.unsplash.com; connect-src 'self';" always;

        # Handle React Router (SPA routing)
        location / {
            try_files $uri $uri/ /index.html;
            
            # Disable caching for HTML files
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # Cache static assets aggressively
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            
            # Enable CORS for fonts and assets
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept";
        }

        # Special handling for source maps (development)
        location ~* \.map$ {
            expires 1d;
            add_header Cache-Control "public";
            access_log off;
        }

        # Health check endpoint
        location = /health {
            access_log off;
            return 200 "healthy\nTimestamp: $time_iso8601\nServer: nginx/$nginx_version\n";
            add_header Content-Type text/plain;
            add_header Cache-Control "no-store, no-cache, must-revalidate";
        }

        # API routes placeholder (for future expansion)
        location /api/ {
            # Placeholder for API endpoints
            return 404 '{"error": "API endpoints not implemented", "timestamp": "$time_iso8601"}';
            add_header Content-Type application/json;
        }

        # Storybook (if built and included)
        location /storybook/ {
            alias /usr/share/nginx/html/storybook/;
            try_files $uri $uri/ /storybook/index.html;
            
            # Basic auth for storybook (optional)
            # auth_basic "Storybook Access";
            # auth_basic_user_file /etc/nginx/.htpasswd;
        }

        # Block access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Block access to backup files
        location ~* \.(bak|backup|old|orig|original|tmp)$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Custom error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }

        # Favicon handling
        location = /favicon.ico {
            access_log off;
            log_not_found off;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Robots.txt
        location = /robots.txt {
            access_log off;
            log_not_found off;
            expires 1d;
            add_header Cache-Control "public";
        }

        # Manifest.json for PWA support
        location = /manifest.json {
            expires 1d;
            add_header Cache-Control "public";
            add_header Content-Type "application/manifest+json";
        }
    }
}